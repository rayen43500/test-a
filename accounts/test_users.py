"""
Script de test pour v√©rifier les utilisateurs dans la base de donn√©es
Lancez avec: python manage.py shell < test_users.py
"""

from accounts.models import User

print("\n" + "="*60)
print("üîç TEST DES UTILISATEURS DANS LA BASE DE DONN√âES")
print("="*60 + "\n")

# Compter les utilisateurs
total_users = User.objects.count()
print(f"üìä Total d'utilisateurs : {total_users}\n")

if total_users == 0:
    print("‚ùå AUCUN UTILISATEUR TROUV√â !")
    print("\nüí° Pour cr√©er un admin, ex√©cutez :")
    print("   python manage.py createsuperuser")
else:
    print("‚úÖ Utilisateurs trouv√©s :\n")
    print(f"{'ID':<5} {'Nom complet':<25} {'Email':<30} {'R√¥le':<15} {'Actif'}")
    print("-" * 100)
    
    for user in User.objects.all():
        active = "‚úì" if user.is_active else "‚úó"
        print(f"{user.id:<5} {user.fullname:<25} {user.email:<30} {user.role:<15} {active}")
    
    print("\n" + "="*60)
    
    # Statistiques par r√¥le
    print("\nüìà STATISTIQUES PAR R√îLE :")
    print(f"   - Admins      : {User.objects.filter(role='Admin').count()}")
    print(f"   - Recruteurs  : {User.objects.filter(role='Recruteur').count()}")
    print(f"   - Candidats   : {User.objects.filter(role='Candidat').count()}")
    
    # V√©rifier les admins
    admins = User.objects.filter(role='Admin')
    print(f"\nüëë ADMINS ({admins.count()}) :")
    for admin in admins:
        print(f"   - {admin.fullname} ({admin.email})")
        print(f"     is_admin property: {admin.is_admin}")
        print(f"     is_staff: {admin.is_staff}")
        print(f"     is_superuser: {admin.is_superuser}")

print("\n" + "="*60 + "\n")