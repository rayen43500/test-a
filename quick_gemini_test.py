#!/usr/bin/env python
"""
Test rapide pour identifier l'erreur Gemini
"""
import os
import sys
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'user_management.settings')
django.setup()

def quick_test():
    """Test rapide de Gemini"""
    print("üöÄ Test rapide de Gemini...")
    
    # Test 1: Configuration
    print("\n1Ô∏è‚É£ V√©rification de la configuration...")
    try:
        from decouple import config
        api_key = config('GEMINI_API_KEY', default=None)
        model_name = config('GEMINI_MODEL', default='gemini-2.0-flash-exp')
        
        print(f"Cl√© API: {'‚úÖ' if api_key else '‚ùå'}")
        print(f"Mod√®le: {model_name}")
        
        if not api_key:
            print("‚ùå ERREUR: GEMINI_API_KEY manquante")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR config: {e}")
        return False
    
    # Test 2: Import Gemini
    print("\n2Ô∏è‚É£ Test import Gemini...")
    try:
        import google.generativeai as genai
        print("‚úÖ Import r√©ussi")
        
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(model_name)
        print("‚úÖ Mod√®le cr√©√©")
        
    except Exception as e:
        print(f"‚ùå ERREUR import: {e}")
        return False
    
    # Test 3: Test simple
    print("\n3Ô∏è‚É£ Test simple...")
    try:
        response = model.generate_content("Test simple - r√©ponds 'OK'")
        print(f"R√©ponse: {response.text}")
        
        if not response.text:
            print("‚ùå ERREUR: Pas de r√©ponse")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR test: {e}")
        return False
    
    # Test 4: Test service CV
    print("\n4Ô∏è‚É£ Test service CV...")
    try:
        from accounts.gemini_cv_analysis import GeminiCVAnalysisService
        
        service = GeminiCVAnalysisService()
        print("‚úÖ Service cr√©√©")
        
        if not service.api_key:
            print("‚ùå ERREUR: Service sans cl√© API")
            return False
            
        if not service.model:
            print("‚ùå ERREUR: Service sans mod√®le")
            return False
            
        print("‚úÖ Service configur√©")
        
    except Exception as e:
        print(f"‚ùå ERREUR service: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test 5: Test application 25
    print("\n5Ô∏è‚É£ Test application 25...")
    try:
        from courses.models import CourseApplication
        
        app = CourseApplication.objects.get(id=25)
        print(f"‚úÖ Application 25 trouv√©e")
        print(f"   Candidat: {app.candidate.username}")
        print(f"   Formation: {app.formation.title}")
        print(f"   CV: {app.cv.name if app.cv else 'Aucun'}")
        
        if not app.cv:
            print("‚ùå ERREUR: Application sans CV")
            return False
            
    except CourseApplication.DoesNotExist:
        print("‚ùå ERREUR: Application 25 non trouv√©e")
        return False
    except Exception as e:
        print(f"‚ùå ERREUR application: {e}")
        return False
    
    # Test 6: Test extraction PDF
    print("\n6Ô∏è‚É£ Test extraction PDF...")
    try:
        cv_text = service.extract_text_from_pdf(app.cv)
        
        if not cv_text:
            print("‚ùå ERREUR: Impossible d'extraire le texte")
            return False
            
        print(f"‚úÖ Texte extrait: {len(cv_text)} caract√®res")
        print(f"Aper√ßu: {cv_text[:100]}...")
        
    except Exception as e:
        print(f"‚ùå ERREUR extraction: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test 7: Test analyse Gemini
    print("\n7Ô∏è‚É£ Test analyse Gemini...")
    try:
        job_description = f"Formation: {app.formation.title}\nDescription: {app.formation.description}"
        
        result = service.analyze_cv_with_gemini(cv_text, job_description)
        
        print(f"R√©sultat:")
        print(f"  Erreur: {result.get('error', 'Aucune')}")
        print(f"  Score: {result.get('score', 'N/A')}")
        print(f"  R√©sum√©: {result.get('summary', 'N/A')[:100]}...")
        
        if result.get('error'):
            print(f"‚ùå ERREUR analyse: {result['error']}")
            return False
            
        print("‚úÖ Analyse r√©ussie")
        
    except Exception as e:
        print(f"‚ùå ERREUR analyse: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\nüéâ Tous les tests sont pass√©s !")
    return True

if __name__ == "__main__":
    success = quick_test()
    
    if success:
        print("\n‚úÖ Gemini fonctionne correctement !")
        print("üí° Le probl√®me pourrait √™tre dans l'endpoint Django.")
    else:
        print("\n‚ùå Probl√®me d√©tect√© dans la configuration Gemini.")
    
    sys.exit(0 if success else 1)
