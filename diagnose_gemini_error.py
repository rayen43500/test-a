#!/usr/bin/env python
"""
Script de diagnostic pour l'erreur Gemini
"""
import os
import sys
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'user_management.settings')
django.setup()

def check_gemini_config():
    """V√©rifier la configuration Gemini"""
    print("üîß V√©rification de la configuration Gemini...")
    
    try:
        from decouple import config
        
        api_key = config('GEMINI_API_KEY', default=None)
        model = config('GEMINI_MODEL', default='gemini-2.0-flash-exp')
        
        print(f"Cl√© API: {'‚úÖ Configur√©e' if api_key else '‚ùå Manquante'}")
        print(f"Mod√®le: {model}")
        
        if api_key:
            print(f"Aper√ßu cl√©: {api_key[:10]}...{api_key[-5:]}")
        
        return bool(api_key)
        
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        return False

def test_gemini_import():
    """Tester l'import de Gemini"""
    print("\nüì¶ Test d'import Gemini...")
    
    try:
        import google.generativeai as genai
        print("‚úÖ google.generativeai import√© avec succ√®s")
        
        # Tester la configuration
        from decouple import config
        api_key = config('GEMINI_API_KEY', default=None)
        
        if api_key:
            genai.configure(api_key=api_key)
            print("‚úÖ Configuration Gemini r√©ussie")
            
            # Tester la cr√©ation d'un mod√®le
            model = genai.GenerativeModel('gemini-2.0-flash-exp')
            print("‚úÖ Mod√®le Gemini cr√©√©")
            
            return True
        else:
            print("‚ùå Cl√© API manquante")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        return False

def test_cv_service():
    """Tester le service CV"""
    print("\nüîç Test du service CV...")
    
    try:
        from accounts.gemini_cv_analysis import GeminiCVAnalysisService
        
        service = GeminiCVAnalysisService()
        print(f"‚úÖ Service cr√©√©")
        print(f"   Cl√© API: {'‚úÖ' if service.api_key else '‚ùå'}")
        print(f"   Mod√®le: {service.model_name}")
        
        if not service.api_key:
            print("‚ùå Cl√© API non configur√©e")
            return False
        
        if not service.model:
            print("‚ùå Mod√®le non initialis√©")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur service: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_application_exists():
    """V√©rifier qu'une application existe"""
    print("\nüìã V√©rification des applications...")
    
    try:
        from courses.models import CourseApplication
        
        # Chercher une application avec CV
        application = CourseApplication.objects.filter(cv__isnull=False).first()
        
        if application:
            print(f"‚úÖ Application trouv√©e: {application.id}")
            print(f"   Candidat: {application.candidate.username}")
            print(f"   Formation: {application.formation.title}")
            print(f"   CV: {application.cv.name if application.cv else 'Aucun'}")
            return application.id
        else:
            print("‚ùå Aucune application avec CV trouv√©e")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur applications: {e}")
        return None

def test_gemini_analysis(application_id):
    """Tester l'analyse Gemini"""
    print(f"\nüß™ Test d'analyse pour l'application {application_id}...")
    
    try:
        from accounts.gemini_cv_analysis import GeminiCVAnalysisService
        from courses.models import CourseApplication
        
        application = CourseApplication.objects.get(id=application_id)
        
        service = GeminiCVAnalysisService()
        
        # Pr√©parer la description du poste
        job_description = f"""
        Formation: {application.formation.title}
        Description: {application.formation.description}
        Instructeur: {application.formation.instructor.get_full_name()}
        """
        
        print(f"üìù Description du poste: {job_description[:100]}...")
        
        # Tester l'analyse
        result = service.process_cv_application(application.cv, job_description)
        
        print(f"üìä R√©sultat:")
        print(f"   Erreur: {result.get('error', 'Aucune')}")
        print(f"   Score: {result.get('cv_score', 'N/A')}")
        print(f"   R√©sum√©: {result.get('cv_summary', 'N/A')[:50]}...")
        
        if result.get('error'):
            print(f"‚ùå Erreur d√©taill√©e: {result['error']}")
            return False
        else:
            print("‚úÖ Analyse r√©ussie")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur analyse: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ Diagnostic de l'erreur Gemini...")
    
    config_ok = check_gemini_config()
    import_ok = test_gemini_import()
    service_ok = test_cv_service()
    app_id = test_application_exists()
    analysis_ok = test_gemini_analysis(app_id) if app_id else False
    
    print(f"\nüìä R√©sultats du diagnostic:")
    print(f"Configuration: {'‚úÖ' if config_ok else '‚ùå'}")
    print(f"Import Gemini: {'‚úÖ' if import_ok else '‚ùå'}")
    print(f"Service CV: {'‚úÖ' if service_ok else '‚ùå'}")
    print(f"Application: {'‚úÖ' if app_id else '‚ùå'}")
    print(f"Analyse: {'‚úÖ' if analysis_ok else '‚ùå'}")
    
    if not config_ok:
        print("\nüí° Solution: V√©rifiez que GEMINI_API_KEY est configur√©e dans .env")
    elif not import_ok:
        print("\nüí° Solution: Installez google-generativeai avec: pip install google-generativeai")
    elif not service_ok:
        print("\nüí° Solution: V√©rifiez la configuration du service")
    elif not app_id:
        print("\nüí° Solution: Cr√©ez une application avec un CV")
    elif not analysis_ok:
        print("\nüí° Solution: V√©rifiez les logs pour l'erreur sp√©cifique")
    
    sys.exit(0 if (config_ok and import_ok and service_ok and app_id and analysis_ok) else 1)
