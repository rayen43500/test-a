#!/usr/bin/env python
"""
Script de debug pour identifier l'erreur Gemini exacte
"""
import os
import sys
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'user_management.settings')
django.setup()

def debug_gemini_step_by_step():
    """Debug √©tape par √©tape pour identifier l'erreur"""
    print("üîç Debug de l'erreur Gemini √©tape par √©tape...")
    
    # √âtape 1: V√©rifier la configuration
    print("\n1Ô∏è‚É£ V√©rification de la configuration...")
    try:
        from decouple import config
        api_key = config('GEMINI_API_KEY', default=None)
        model_name = config('GEMINI_MODEL', default='gemini-2.0-flash-exp')
        
        print(f"Cl√© API: {'‚úÖ Configur√©e' if api_key else '‚ùå Manquante'}")
        print(f"Mod√®le: {model_name}")
        
        if not api_key:
            print("‚ùå ERREUR: GEMINI_API_KEY manquante dans .env")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR configuration: {e}")
        return False
    
    # √âtape 2: Test import et configuration Gemini
    print("\n2Ô∏è‚É£ Test import et configuration Gemini...")
    try:
        import google.generativeai as genai
        print("‚úÖ Import r√©ussi")
        
        genai.configure(api_key=api_key)
        print("‚úÖ Configuration r√©ussie")
        
        model = genai.GenerativeModel(model_name)
        print("‚úÖ Mod√®le cr√©√©")
        
    except ImportError as e:
        print(f"‚ùå ERREUR import: {e}")
        print("üí° Solution: pip install google-generativeai")
        return False
    except Exception as e:
        print(f"‚ùå ERREUR configuration: {e}")
        return False
    
    # √âtape 3: Test simple de Gemini
    print("\n3Ô∏è‚É£ Test simple de Gemini...")
    try:
        response = model.generate_content("Test simple - r√©ponds 'OK'")
        print(f"R√©ponse: {response.text}")
        
        if not response.text:
            print("‚ùå ERREUR: Pas de r√©ponse de Gemini")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR test simple: {e}")
        return False
    
    # √âtape 4: Test du service CV
    print("\n4Ô∏è‚É£ Test du service CV...")
    try:
        from accounts.gemini_cv_analysis import GeminiCVAnalysisService
        
        service = GeminiCVAnalysisService()
        print("‚úÖ Service cr√©√©")
        
        if not service.api_key:
            print("‚ùå ERREUR: Service sans cl√© API")
            return False
            
        if not service.model:
            print("‚ùå ERREUR: Service sans mod√®le")
            return False
            
        print("‚úÖ Service configur√©")
        
    except Exception as e:
        print(f"‚ùå ERREUR service: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # √âtape 5: Test avec application r√©elle
    print("\n5Ô∏è‚É£ Test avec application r√©elle...")
    try:
        from courses.models import CourseApplication
        
        # Trouver l'application 25
        try:
            app = CourseApplication.objects.get(id=25)
            print(f"‚úÖ Application 25 trouv√©e")
            print(f"   Candidat: {app.candidate.username}")
            print(f"   Formation: {app.formation.title}")
            print(f"   CV: {app.cv.name if app.cv else 'Aucun'}")
            
            if not app.cv:
                print("‚ùå ERREUR: Application sans CV")
                return False
                
        except CourseApplication.DoesNotExist:
            print("‚ùå ERREUR: Application 25 non trouv√©e")
            return False
        
        # Test d'extraction PDF
        print("\n6Ô∏è‚É£ Test d'extraction PDF...")
        cv_text = service.extract_text_from_pdf(app.cv)
        
        if not cv_text:
            print("‚ùå ERREUR: Impossible d'extraire le texte du CV")
            return False
            
        print(f"‚úÖ Texte extrait: {len(cv_text)} caract√®res")
        print(f"Aper√ßu: {cv_text[:100]}...")
        
        # Test d'analyse Gemini
        print("\n7Ô∏è‚É£ Test d'analyse Gemini...")
        job_description = f"Formation: {app.formation.title}\nDescription: {app.formation.description}"
        
        print(f"Description du poste: {job_description}")
        
        result = service.analyze_cv_with_gemini(cv_text, job_description)
        
        print(f"R√©sultat de l'analyse:")
        print(f"  Erreur: {result.get('error', 'Aucune')}")
        print(f"  Score: {result.get('score', 'N/A')}")
        print(f"  R√©sum√©: {result.get('summary', 'N/A')[:100]}...")
        
        if result.get('error'):
            print(f"‚ùå ERREUR analyse: {result['error']}")
            return False
            
        print("‚úÖ Analyse r√©ussie")
        
    except Exception as e:
        print(f"‚ùå ERREUR test application: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # √âtape 6: Test de l'endpoint Django
    print("\n8Ô∏è‚É£ Test de l'endpoint Django...")
    try:
        from django.test import RequestFactory
        from accounts.gemini_cv_test_view import GeminiCVTestView
        
        factory = RequestFactory()
        request = factory.post(f'/api/test/gemini-cv-analysis/25/')
        
        view = GeminiCVTestView()
        response = view.post(request, 25)
        
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.data}")
        
        if response.status_code != 200:
            print(f"‚ùå ERREUR endpoint: {response.data}")
            return False
            
        print("‚úÖ Endpoint fonctionne")
        
    except Exception as e:
        print(f"‚ùå ERREUR endpoint: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    print("\nüéâ Tous les tests sont pass√©s !")
    return True

if __name__ == "__main__":
    success = debug_gemini_step_by_step()
    
    if success:
        print("\n‚úÖ Le probl√®me n'est pas dans la configuration Gemini.")
        print("üí° V√©rifiez les logs du serveur Django pour plus de d√©tails.")
    else:
        print("\n‚ùå Probl√®me identifi√© dans la configuration Gemini.")
        print("üí° Suivez les solutions sugg√©r√©es ci-dessus.")
    
    sys.exit(0 if success else 1)
